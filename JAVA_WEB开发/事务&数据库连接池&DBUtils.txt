# Transaction&数据库连接池

[TOC]



> ## Transaction基础
>
> 1. Transaction: 事务, 一组操作, 包含单个逻辑	
> 2. 特点:如果一个逻辑执行错误, 所有操作全部回滚
>
> ## 使用sql语句进行模拟事务
>
> ## 使用代码模拟事务
>
> ```java
> 		Connection conn = null;
>      PreparedStatement preparedStatement = null;
>      ResultSet resultSet = null;
>      conn = JDBCUtil.getConnection();
>      try {
>          conn.setAutoCommit(false);
>          preparedStatement = conn.prepareStatement("update t_admin set adminname = ? where adminId = ?");
>          preparedStatement.setString(1, "ding");
>          preparedStatement.setString(2, "a1");
>          int result = preparedStatement.executeUpdate();
>          if (result > 0) {
>              int key = 10 / 0;
>          } else {
>              String s = null;
>              s.length();
>          }
>          preparedStatement.setString(1, "五天");
>          preparedStatement.setString(2, "a2");
> //            提交事务
>          conn.commit();
>      } catch (SQLException e) {
>          try {
>              conn.rollback();
>          } catch (SQLException e1) {
>              e1.printStackTrace();
>          }
>          e.printStackTrace();
>      } finally {
>          try {
>              preparedStatement.close();
>              conn.close();
>          } catch (SQLException e) {
>              e.printStackTrace();
>          }
> 
>      }
> ```
>
> 
>
> ## 事务的特点
>
> 1. ACID
>    1. 原子性:事务中包含的逻辑不可分割
>    2. 一致性:事务执行前和执行后数据保持完整
>    3. 隔离性:事务执行期间,不应该受到其他事务的影响
>    4. 持久性:事务执行成功,数据应该持久保存到磁盘上

## 事务的安全问题

### 导致原因:不设置隔离级别

### 读的问题

1. 脏读
   1. 概念: 一个事务读到了另一个事务还未提交的数据
   2. 例子:通过将mysql数据库的 个隔离等级将至Read_uncommitted来实现这种效果
      1. set session transaction isolation level read uncommitted;
      2. start transaction;
      3. 另起一个链接, 并同样上面的操作,并对同一张表进行查询和插入操作, 就会出现所谓的脏读现象(即未保存数据)

2. 不可重复读
   1. 幻读: 当两个事务同时操作时, 当其中一个事务查询第一次后 , 获得一个结果, 然后另一个事务 对数据库进行了update操作, 导致数据更改, 然后第一个事务再次查询, 发现数据已经不是以前哪一个了, 导致的重复读的效果.
   2. 解决:不可重复度
      1. 设置mysql隔离等级至Repeatable read  使得事务读取的数据一直保持在第一次读取数据时的情况, 任何修改都不会修改此事务读取的值  让两个事务无法产生影响
      2. 但是 如果其他修改已经修改了信息 , 也是读取的旧数据, 无法获取新的数据

   

   3.可串行化

   ​	当两个链接同时进行时 , 其中一个链接会对表进行保护, 其他链接无法更新 并且无法查询内容, 防止出现幻读的情况

3.  排序  安全性 : 可串行化 > 可重复读>读已提交>读未提交

    拦截程度: 反过来

### 写的问题

1. 丢失更新
   1. 悲观锁
   2. 乐观锁

### 解决问题方法:设置隔离级别

1. Read Uncommitted 
2. Read Committed
3. Repeatable Read 
4. Serializable

>## 数据库连接池

1. 原因: 创建数据库链接比较耗费资源
2. 概念: 在内存中先创建多个链接 , 存放起来 , 需要就从连接池拿链接 , 用完放回 

>





### 开源连接池

#### DBCP

1. 配置环境 : 

   基础需要两个包: common-dbcp2.jar包和common-pool2.jar , 这俩两个基本可以保证使用  但是 还有一个日志包: common-logging2.jar

2. 通过代码进行基础链接属性配置

   ```java
    		// 创建连接池对象
   		BasicDataSource dataSource = new BasicDataSource();
           String sql = "select * from books where id = ?;";
           Connection connection = null;
           PreparedStatement preparedStatement = null;
           ResultSet resultSet = null;
           try {
               dataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");
               dataSource.setUrl("jdbc:mysql://localhost:3360/bookdb");
               dataSource.setUsername("root");
               dataSource.setPassword("ding4732");
               connection = dataSource.getConnection();
               preparedStatement = connection.prepareStatement(sql);
               preparedStatement.setString(1, "001");
               resultSet = preparedStatement.executeQuery();
               while (resultSet.next()) {
                   System.out.println(resultSet.getString(1));
               }
           } catch (SQLException e) {
               e.printStackTrace();
           }
   ```

   ​	

3. 通过配置文件进行配置

   ```java
   		BasicDataSource dataSource = null;
           // 配置文件对象
   		Properties properties = new Properties();
           try {
               // 加载配置文件内容
               properties.load(DBCPDemo02.class.getClassLoader().getResourceAsStream("dbconfig.properties"));
         		// 通过配置文件创建连接池对象      
               dataSource = BasicDataSourceFactory.createDataSource(properties);
           } catch (Exception exception) {
               exception.printStackTrace();
           }
           String sql = "select * from books where id = ?;";
           Connection connection = null;
           PreparedStatement preparedStatement = null;
           ResultSet resultSet = null;
           try {
               connection = dataSource.getConnection();
           } catch (SQLException e) {
               e.printStackTrace();
           } finally {
               try {
                   connection.close();
               } catch (SQLException e) {
                   e.printStackTrace();
               }
           }
   ```

   

#### C3P0

1. 配置环境
2. 代码配置
3. 配置文件配置

#### DButils

1. 配置:导入common-DBUtils包

2. 使用:

   1. 获取一个list集合

      ```java
        		QueryRunner queryRunner = new QueryRunner(new ComboPooledDataSource());
              List<Books> booksList = null;
              try{
                  booksList = queryRunner.query("select * from books",new BeanListHandler<Books>(Books.class));
              }catch(SQLException e){
                  e.printStackTrace();
              }
              Iterator<Books> iterator = booksList.iterator();
              while(iterator.hasNext()){
                  System.out.println(iterator.next().toString());
              }
      ```

      其他实现类都差不多 只是返回值不同

   2. 所有的实现类

      1. ArrayHander : 
         1. 将结果集中的第一条数据封装到一个Object数组中, 每个元素对应一个字段
      2. ArraylistHander
         1. 将结果集中每一条记录东都封装到一个Object数组中, 并将数组返回到一个List集合中
      3. **BeanHander**
         1. 将一条记录返回到一个指定javaBean中
      4. **BeanListHandler**
         1. 将记录封装到Bean中, 并将Bean封装成list
      5. MapHandler
         1. 将一条记录了封装到一个Map<String,Object> 集合中, 
      6. MapListHandler
         1. 将结果集中的每一条数据封装到Map<String,Object> 集合中, 并将map封装到list集合中
      7. ColumnListHandler
         1. 将结果集中指定的字段封装到一个list中
      8. KeyedHander
         1. 将结果集中每一条记录封装到Map<String,Object> 在将这个map集合作为另一个Map的value,另一个map集合的key就是值得顶的字段值
      9. ScalarHandler
         1. 用于单数据类型, 

