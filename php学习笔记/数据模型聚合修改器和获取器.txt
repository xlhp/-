1,聚合: 指代的是就是如何使用提供的方法代替sql语句进行处理

2,获取器:数据库中存储的不是一定需要的 需要进行转变 所以才会有获取器一说
		1,控制器调用:
			$demo = new Demo();
			$res = $demo::get(["id"=>"67"]);
			//toarray方法会调用处理器函数 对数据进行处理
			dump($res->toArray());
			//若不想通过获取器处理  则使用getData()方法
			dump($res->getData());
		2,模型:
			 //获取性别后处理
			public function getSexAttr($vl){
				switch ($vl)
				{
					case 0:return "未知";break;
					case 1:return "男性";break;
					case 2:return "女性";break;
					default : return "用户储存错误";break;
				}
			}
		3,注意:1,如果字段名为  user_status 获取器名字  getUserStatusAttr
							   status   				getStatusAttr
		
		
3,修改器:
	通过该例子进行数据加密操作
	 1,控制器中:
			 //修改器:
			//例子:对密码加密
			public function modify(){
				$demo = new Demo();
				$res = $demo->save(["pass"=>"adf"],["id"=>"71"]);
				dump($res);
			}
	2,数据模型中
		public function setPassAttr($value){
			return md5($value);
		}
	3,注意:触发条件为save方法修改或插入
	
4,自动完成
	类似于自动完成
	1,数据模型
	//首先要设置auto属性  确认那个字段需要进行自动完成
	protected $auto = ["sex"];
	public function setSexAttr(){
        return 321;
    }
	2,控制器
	 //自动完成
    public function auto(){
        $demo = new Demo();
        //插入数据
        $res = $demo->save(["name"=>"丁兆顺","pass"=>"321"]);
        dump($res);
    }
	
	
	关于修改器和自动完成的区别: 完全看不出来  都会在插入和修改时调用  都是修改了插入数据库中的值 且都是对数据的处理  如何处理看个人
	老师说 : 自动完成一般不用
	
	//设置插入时什么字段
    protected $insert = [];
    //设置修改时修改什么字段
    protected $update = [];
	一般是同步修改事件和通过插入事件  方法设置都类似于上面的自动完成
5,事件戳
	:系统支持自动设置
	1,配置文件设置
		database.php文件:
		 'auto_timestamp'  => false,
			该参数为true  则会在每张表中寻找update_time和create_time 来添加时间戳和更改时间戳
	2,在数据模型中设置
	 //设置时间戳字段 如果你的数据库表中没有相对应的字段  如果设置false 则会取消更新
    protected $createTime = "create_times";
    protected $updateTime = "updates_time";
	//取消字段的时间戳设置
	protected $updateTime = false;

6,软删除数据
		:设置一个回收站 提供数据恢复
		1,首先需要在数据库中设置一个删除事件字段
		2,在数据模型中引入   traits\model\SoftDelete;
		3,如果删除后 会在数据库中的删除事件字段中会出现一个删除时间
	注意:1,如果没有delete_time删除字段 则可以自己设一个  
				protected $deleteTime = "delete_times";
			软删除只可以用destroy方法触发
	软删除本质: 通过给一条记录添加一个字段 通过识别该字段来进行保护 , 通过软删除的记录无法被查询
	但是数据库中依旧存在该记录
	
	读取软删除数据
		1,查找带有软删除的数据
		//查找软删除删除后的数据
        $res = $demo::withTrashed()->find(75);
        dump($res->toArray());
		2,仅仅读取软删除的数据
		$res = $demo::onlyTrashed()->select();
        dump($res);
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	